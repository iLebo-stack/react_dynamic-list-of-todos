{"version":3,"sources":["components/TodoList/TodoList.tsx","api's/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","handleSetSelectedUserId","selectedUserId","useState","todos","setTodos","query","setQuery","todosCategory","setTodosCategory","useEffect","fetch","then","response","json","todosFromServer","visibleTodos","filter","title","completed","toLowerCase","includes","prepareTodos","className","type","placeholder","value","onChange","event","target","map","id","userId","cn","readOnly","onClick","checked","CurrentUser","user","setUser","catch","error","getUser","userFromServer","name","email","phone","App","setSelectedUserId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3ed990d8.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport cn from 'classnames';\nimport { getTodos } from '../../api\\'s/api';\nimport './TodoList.scss';\n\ntype Todo = {\n  completed: boolean;\n  id: number;\n  title: string;\n  userId: number;\n};\n\ntype HandleSetSelectedUserId = (id: number) => void;\n\ninterface Props {\n  handleSetSelectedUserId: HandleSetSelectedUserId;\n  selectedUserId: number;\n}\n\nexport const TodoList: React.FC<Props> = ({\n  handleSetSelectedUserId,\n  selectedUserId,\n}) => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [query, setQuery] = useState('');\n  const [todosCategory, setTodosCategory] = useState('all');\n\n  useEffect(() => {\n    getTodos()\n      .then(todosFromServer => {\n        setTodos(todosFromServer);\n      });\n  }, []);\n\n  function prepareTodos() {\n    switch (todosCategory) {\n      case 'active':\n        return todos.filter(({ title, completed }) => {\n          return title.toLowerCase().includes(query.toLowerCase())\n            && completed === false;\n        });\n      case 'completed':\n        return todos.filter(({ title, completed }) => {\n          return title.toLowerCase().includes(query.toLowerCase()) && completed;\n        });\n      default:\n        return todos.filter(({ title }) => {\n          return title.toLowerCase().includes(query.toLowerCase());\n        });\n    }\n  }\n\n  const visibleTodos = prepareTodos();\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <input\n        type=\"text\"\n        placeholder=\"filter\"\n        className=\"input is-primary\"\n        value={query}\n        onChange={(event) => {\n          setQuery(event.target.value);\n        }}\n      />\n\n      <br />\n      <br />\n\n      <div className=\"select is-primary\">\n        <select\n          value={todosCategory}\n          onChange={(event) => {\n            setTodosCategory(event.target.value);\n          }}\n        >\n          <option value=\"all\">All todos</option>\n          <option value=\"active\">Active todos</option>\n          <option value=\"completed\">Completed todos</option>\n        </select>\n      </div>\n\n      <br />\n      <br />\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {visibleTodos.map(({\n            id,\n            title,\n            userId,\n            completed,\n          }) => (\n            <li\n              className={cn('TodoList__item',\n                {\n                  'TodoList__item--unchecked': !completed,\n                  'TodoList__item--checked': completed,\n                })}\n              key={id}\n            >\n              <label>\n                <input type=\"checkbox\" readOnly />\n                <p>{title}</p>\n              </label>\n\n              <button\n                className={cn('TodoList__user-button button',\n                  {\n                    // eslint-disable-next-line max-len\n                    'TodoList__user-button--selected': selectedUserId === userId,\n                  })}\n                type=\"button\"\n                onClick={() => {\n                  handleSetSelectedUserId(userId);\n                }}\n              >\n                User&nbsp;#\n                {userId}\n              </button>\n            </li>\n          ))}\n\n          <li className=\"TodoList__item TodoList__item--checked\">\n            <label>\n              <input type=\"checkbox\" checked readOnly />\n              <p>distinctio vitae autem nihil ut molestias quo</p>\n            </label>\n\n            <button\n              className=\"TodoList__user-button button\"\n              type=\"button\"\n            >\n              User&nbsp;#2\n            </button>\n          </li>\n        </ul>\n      </div>\n    </div>\n  );\n};\n","// const API_URL = 'https://mate-academy.github.io/fe-students-api/';\n\nexport function getTodos() {\n  return fetch('https://mate.academy/students-api/todos')\n    .then(response => response.json());\n}\n\nexport function getUser(userId: number) {\n  return fetch(`https://mate.academy/students-api/users/${userId}`)\n    .then(response => response.json())\n    .catch(error => `Error - ${error}`);\n}\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api\\'s/api';\nimport './CurrentUser.scss';\n\ntype HandleSetSelectedUserId = (id: number) => void;\ntype User = {\n  email: string;\n  id: number;\n  name: string;\n  phone: string;\n};\n\ninterface Props {\n  handleSetSelectedUserId: HandleSetSelectedUserId;\n  userId: number;\n}\n\nexport const CurrentUser: React.FC<Props> = ({\n  userId,\n  handleSetSelectedUserId,\n}) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    getUser(userId)\n      .then(userFromServer => {\n        setUser(userFromServer);\n      });\n  }, [userId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      {user?.id\n        ? <h2 className=\"CurrentUser__title\"><span>{`Selected user: ${user?.id}`}</span></h2>\n        : <h2>User was not found</h2>}\n\n      <h3 className=\"CurrentUser__name\">{user?.name}</h3>\n      <p className=\"CurrentUser__email\">{user?.email}</p>\n      <p className=\"CurrentUser__phone\">{user?.phone}</p>\n\n      <button\n        type=\"button\"\n        className=\"button\"\n        onClick={() => handleSetSelectedUserId(0)}\n      >\n        Clear\n      </button>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport 'bulma';\n\nconst App: React.FC = () => {\n  const [\n    selectedUserId,\n    setSelectedUserId,\n  ] = useState(0);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          handleSetSelectedUserId={setSelectedUserId}\n          selectedUserId={selectedUserId}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n              handleSetSelectedUserId={setSelectedUserId}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}