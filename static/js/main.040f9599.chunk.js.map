{"version":3,"sources":["components/TodoList/TodoList.tsx","api's/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","handleSetSelectedUserId","selectedUserId","useState","todos","setTodos","query","setQuery","todosCategory","setTodosCategory","useEffect","fetch","then","response","json","catch","error","Error","todosFromServer","queryMatched","title","toLowerCase","includes","visibleTodos","filter","completed","prepareTodos","className","type","placeholder","value","onChange","event","target","map","id","userId","checked","readOnly","cn","onClick","CurrentUser","user","setUser","getUser","userFromServer","name","email","phone","App","setSelectedUserId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.040f9599.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport cn from 'classnames';\nimport { getTodos } from '../../api\\'s/api';\nimport './TodoList.scss';\n\ntype HandleSetSelectedUserId = (id: number) => void;\n\ninterface Props {\n  handleSetSelectedUserId: HandleSetSelectedUserId;\n  selectedUserId: number;\n}\n\nexport const TodoList: React.FC<Props> = ({\n  handleSetSelectedUserId,\n  selectedUserId,\n}) => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [query, setQuery] = useState('');\n  const [todosCategory, setTodosCategory] = useState('all');\n\n  useEffect(() => {\n    getTodos()\n      .then(todosFromServer => {\n        setTodos(todosFromServer);\n      });\n  }, []);\n\n  const queryMatched = (title: string) => (\n    title.toLowerCase().includes(query.toLowerCase())\n  );\n\n  function prepareTodos() {\n    switch (todosCategory) {\n      case 'active':\n        return todos.filter(({ title, completed }) => (\n          queryMatched(title) && completed === false\n        ));\n      case 'completed':\n        return todos.filter(({ title, completed }) => (\n          queryMatched(title) && completed\n        ));\n      default:\n        return todos.filter(({ title }) => (\n          queryMatched(title)\n        ));\n    }\n  }\n\n  const visibleTodos = prepareTodos();\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <input\n        type=\"text\"\n        placeholder=\"filter\"\n        className=\"input is-primary\"\n        value={query}\n        onChange={(event) => {\n          setQuery(event.target.value);\n        }}\n      />\n\n      <br />\n      <br />\n\n      <div className=\"select is-primary\">\n        <select\n          value={todosCategory}\n          onChange={(event) => {\n            setTodosCategory(event.target.value);\n          }}\n        >\n          <option value=\"all\">All todos</option>\n          <option value=\"active\">Active todos</option>\n          <option value=\"completed\">Completed todos</option>\n        </select>\n      </div>\n\n      <br />\n      <br />\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {visibleTodos.map(({\n            id,\n            title,\n            userId,\n            completed,\n          }) => (\n            completed\n              ? (\n                <li\n                  className=\"TodoList__item TodoList__item--checked\"\n                  key={id}\n                >\n                  <label>\n                    <input\n                      type=\"checkbox\"\n                      checked\n                      readOnly\n                    />\n                    <p>{title}</p>\n                  </label>\n\n                  <button\n                    className={cn('TodoList__user-button button',\n                      {\n                        // eslint-disable-next-line max-len\n                        'TodoList__user-button--selected': selectedUserId === userId,\n                      })}\n                    type=\"button\"\n                    onClick={() => {\n                      handleSetSelectedUserId(userId);\n                    }}\n                  >\n                    User&nbsp;#\n                    {userId}\n                  </button>\n                </li>\n              )\n              : (\n                <li\n                  className=\"TodoList__item TodoList__item--unchecked\"\n                  key={id}\n                >\n                  <label>\n                    <input type=\"checkbox\" readOnly />\n                    <p>{title}</p>\n                  </label>\n\n                  <button\n                    className={cn('TodoList__user-button button',\n                      {\n                        // eslint-disable-next-line max-len\n                        'TodoList__user-button--selected': selectedUserId === userId,\n                      })}\n                    type=\"button\"\n                    onClick={() => {\n                      handleSetSelectedUserId(userId);\n                    }}\n                  >\n                    User&nbsp;#\n                    {userId}\n                  </button>\n                </li>\n              )\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","export function getTodos() {\n  return fetch('https://mate.academy/students-api/todos')\n    .then(response => response.json())\n    .catch(error => {\n      throw Error(error);\n    });\n}\n\nexport function getUser(userId: number) {\n  return fetch(`https://mate.academy/students-api/users/${userId}`)\n    .then(response => response.json())\n    .catch(error => {\n      throw Error(error);\n    });\n}\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api\\'s/api';\nimport './CurrentUser.scss';\n\ntype HandleSetSelectedUserId = (id: number) => void;\n\ninterface Props {\n  handleSetSelectedUserId: HandleSetSelectedUserId;\n  userId: number;\n}\n\nexport const CurrentUser: React.FC<Props> = ({\n  userId,\n  handleSetSelectedUserId,\n}) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    getUser(userId)\n      .then(userFromServer => {\n        setUser(userFromServer);\n      });\n  }, [userId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      {user?.id\n        ? (\n          <h2 className=\"CurrentUser__title\">\n            <span>{`Selected user: ${user?.id}`}</span>\n          </h2>\n        )\n        : <h2>User was not found</h2>}\n\n      <h3 className=\"CurrentUser__name\">{user?.name}</h3>\n      <p className=\"CurrentUser__email\">{user?.email}</p>\n      <p className=\"CurrentUser__phone\">{user?.phone}</p>\n\n      <button\n        type=\"button\"\n        className=\"button\"\n        onClick={() => handleSetSelectedUserId(0)}\n      >\n        Clear\n      </button>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport 'bulma';\n\nconst App: React.FC = () => {\n  const [\n    selectedUserId,\n    setSelectedUserId,\n  ] = useState(0);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          handleSetSelectedUserId={setSelectedUserId}\n          selectedUserId={selectedUserId}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n              handleSetSelectedUserId={setSelectedUserId}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}